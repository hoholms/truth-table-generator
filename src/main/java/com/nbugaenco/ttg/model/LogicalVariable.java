package com.nbugaenco.ttg.model;

import java.util.Objects;

import com.nbugaenco.ttg.service.RPNEvaluator;

/**
 * Represents a logical variable or a logical expression result within the truth table evaluation.
 * It holds the expression string, its boolean value for a specific row, and the precedence of the operator that
 * generated this variable (used for formatting).
 */
public final class LogicalVariable {

  private final String  expression;
  private final boolean value;
  private final int     precedence;

  /**
   * Constructor for intermediate results generated by operators.
   *
   * @param expression
   *     The string representation of the sub-expression (e.g., "A & B").
   * @param value
   *     The boolean result of evaluating the sub-expression.
   * @param precedence
   *     The precedence level of the operator that created this result.
   */
  public LogicalVariable(String expression, boolean value, int precedence) {
    this.expression = Objects.requireNonNull(expression, "Expression cannot be null");
    this.value = value;
    this.precedence = precedence;
  }

  /**
   * Constructor for base variables (e.g., "A", "B", "C").
   * Base variables are assigned the highest possible precedence so they
   * never get unnecessarily parenthesized when used as operands.
   *
   * @param expression
   *     The variable name (e.g., "A").
   * @param value
   *     The boolean value of the variable for the current row.
   */
  public LogicalVariable(String expression, boolean value) {
    this(expression, value, Integer.MAX_VALUE);
  }

  /**
   * @return The string representation of the variable or sub-expression.
   */
  public String expression() {
    return expression;
  }

  /**
   * @return The boolean value of the variable or sub-expression for the current row.
   */
  public boolean value() {
    return value;
  }

  /**
   * Gets the precedence level associated with this logical variable.
   * This is the precedence of the operator that produced this variable,
   * or {@code Integer.MAX_VALUE} if it's a base variable.
   * Used by {@link RPNEvaluator} to determine parenthesize.
   *
   * @return The precedence level.
   */
  public int getPrecedence() {
    return precedence;
  }

  @Override
  public boolean equals(final Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final LogicalVariable that = (LogicalVariable) o;
    return this.value == that.value && Objects.equals(this.expression, that.expression);
  }

  /**
   * Returns the hash code value for this logical variable.
   *
   * @return the hash code value
   */
  @Override
  public int hashCode() {
    return Objects.hash(expression(), value());
  }

}
